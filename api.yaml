swagger: "2.0"
info:
  title: Binar Challenge Chapter 8
  description: API Documentation using swagger.
  version: 1.0.0
  servers:
    -url: http://localhost:4000
    description: This is the local server

host: "localhost:4000"
basePath: "/api/v1/players"

tags:
- name: "Player Control"
  description: "Everything about player controller"

schemes: 
  - http
  - https

paths:
  /:
    get:
      tags:
      - "Player"
      summary: "Get all player"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Success"
    post:
      tags:
      - "Player"
      summary: "Create new player"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Player object that you want to get"
        required: true
        schema:
          $ref: "#/definitions/createPlayer"
      responses:
        "200":
          description: "Success"
  /{playerId}:
    get:
      tags:
      - "Player"
      summary: "Get player by ID"
      description: "This is API for get user data by ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "playerId"
        description: "Player object that you want to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Player with the ID not found"
    put:
      tags:
      - "Player"
      summary: "Update player by ID"
      description: "This is API for updating user data using ID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "playerId"
        description: "Player ID that you want to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Player object that you want to update"
        required: true
        schema:
          $ref: "#/definitions/updatePlayer"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Player with the ID not found"
    delete:
      tags:
      - "Player"
      summary: "Delete user"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "playerId"
        in: "path"
        description: "The user's id to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Success Delete ID"
        "400":
          description: "Failed"
  /exp/{playerId}:
    post:
      tags:
      - "Player"
      summary: "Update player experience"
      description: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "playerId"
        description: "Player id that you want to update the experience"
        required: true
      - in: "body"
        name: "body"
        description: "Total experience you want to update"
        required: true
        schema:
          $ref: "#/definitions/updateExperience"
      responses:
        "200":
          description: "Success"
        "400":
          description: "Failed"



definitions:
  getPlayers:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      experience:
        type: "string"
      lvl:
        type: "string"

  createPlayer:      
    type: "object"
    required:
      - "username"
      - "email"
      - "password"
      - "experience"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      experience:
        type: "integer"
        format: "int64"
  
  updatePlayer:
    type: "object"
    required:
        - "id"
        - "username"
        - "email"
        - "password"
        - "experience"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      experience:
        type: "integer"
        format: "int64"
  updateExperience:
    type: "object"
    required:
      - "id"
      - "exp"
    properties:
      id:
        type: "integer"
        format: "int64"
      exp:
        type: "integer"
        format: "int64"